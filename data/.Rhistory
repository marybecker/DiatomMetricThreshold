geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP")
table(pred=pred,true=m$TPGrp)[1]
table(pred=pred,true=m$TPGrp)[2]
table(pred=pred,true=m$TPGrp)[3]
table(pred=pred,true=m$TPGrp)[4]
table(pred=pred,true=m$TPGrp)[5]
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
cfmt<-cbind(hh,hl,lh,ll)
cfmt
cfmt[1,]
n<-1
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
m<-sample(IND,size=138)
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
cfmt<-cbind(hh,hl,lh,ll)
confoutput[k,]<-cfmt[1,]
}
m<-sample(IND,size=138)
m<-sample(IND,size=138,replace=TRUE)
m
dim(m)
dim(IND)
m<-sample(nrow(IND),size=138,replace=TRUE)
dim(m)
m
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
dim(m)
m
m<-m[,c(5,6,8)]
m
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
cfmt<-cbind(hh,hl,lh,ll)
confoutput[k,]<-cfmt[1,]
}
View(cfmt)
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
cfmt<-as.matrix(cbind(hh,hl,lh,ll))
confoutput[k,]<-cfmt[1,]
}
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
cfmt<-as.matrix(cbind(hh,hl,lh,ll))
confoutput[k,]<-cfmt[1,1:4]
}
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
cfmt<-cbind(hh,hl,lh,ll)
confoutput[[k]]<-cfmt[1,]
}
cfmt[1]
cfmt
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
cfmt<-cbind(hh,hl,lh,ll)
confoutput[[k]]<-cfmt
}
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
cfmt<-cbind(hh,hl,lh,ll)
for (i in 1:4){
confoutput[[k]]<-cfmt[i]
}
}
confoutput[k,1:4]
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
confoutput[k,1:4]<-cbind(hh,hl,lh,ll)
}
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
confoutput[k,1:4]<-as.matrix(cbind(hh,hl,lh,ll))
}
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
confoutput[k,1:4]<-as.matrix(cbind(hh,hl,lh,ll))
}
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
#confoutput[k,1:4]<-as.matrix(cbind(hh,hl,lh,ll))
}
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[m,]
m<-m[,c(5,6,8)]
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[r,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
#confoutput[k,1:4]<-as.matrix(cbind(hh,hl,lh,ll))
}
as.matrix(cbind(hh,hl,lh,ll))
n<-2
lineoutput<- matrix(nrow=n,ncol=4)
confoutput<- matrix(nrow=n,ncol=4)
for(k in 1:n) {
r<-sample(nrow(IND),size=138,replace=TRUE)
m<-IND[r,]
m<-m[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=4,"low"=1)))
pred<-predict(model,m)
hh<-table(pred=pred,true=m$TPGrp)[1]# confusion matrix
hl<-table(pred=pred,true=m$TPGrp)[2]
lh<-table(pred=pred,true=m$TPGrp)[3]
ll<-table(pred=pred,true=m$TPGrp)[4]
confoutput[k,]<-as.matrix(cbind(hh,hl,lh,ll))
}
confoutput
table(pred=pred,true=m$TPGrp)
int
sl
beta
beta0
IND <-  read.csv ("DiatomMetrics_GAM.csv",sep=",",header=TRUE)
IND<-IND[IND$ID!='S18882_2015',]
IND[is.na(IND)] <- 0
IND$TPGrp<-factor(ifelse(IND$TP_MGL<0.065,"low","high"))
IND$TPGrp3<-factor(ifelse(IND$TP_MGL<0.04,"low",ifelse(IND$TP_MGL>0.065,"high","medium")))
IND$R<-(IND$H*10)/(IND$H+IND$L)
IND$SH<-IND$H*10
INDT <-  read.csv ("DiatomMetrics_2017.csv",sep=",",header=TRUE)
INDT[is.na(INDT)] <- 0
INDT$TPGrp<-factor(ifelse(INDT$TP_MGL<0.065,"low","high"))
INDT$R<-(INDT$H*10)/(INDT$H+INDT$L)
INDT$SH<-INDT$H*10
x<-as.matrix(IND[,c(5,6)])
y<-IND[,8]
m<-IND[,c(5,6,8)]
##Run Linear SVM Model
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,class.weights=(c("high"=0.75,"low"=0.25)))
pred<-predict(model,m)
table(pred=pred,true=m$TPGrp)# confusion matrix
beta<- drop(t(model$coefs)%*%x[model$index,])
beta0 <- model$rho
int<-(beta0 / beta[1]) #line intercept
sl<-(-beta[2] / beta[1]) # line slope
int1<-(beta0 - 1) / beta[1] #lower decision boundary
int2<-(beta0 + 1) / beta[1] #upper decision boundary
mindx<-as.data.frame(x[model$index,])#support points that determine the boundary
##Plot the hyperplane
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=sl)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP")
m<-IND[,c(5,6,8)]
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights="inverse", cross=100,subset=138)
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights="inverse", cross=100)
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=0.75,"low"=0.25))) , cross=100)
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=0.75,"low"=0.25)), cross=100)
pred<-predict(model,m)
table(pred=pred,true=m$TPGrp)# confusion matrix
model$probA
summary(model)
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=0.75,"low"=0.25)), cross=100,
subset=m[sample(nrow(m),size=138,replace=TRUE),])
svm
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=0.75,"low"=0.25)),probability=TRUE)
pred<-predict(model,m)
table(pred=pred,true=m$TPGrp)# confusion matrix
x<-as.matrix(IND[,c(5,6)])
y<-IND[,8]
m<-IND[,c(5,6,8)]
##Run Linear SVM Model
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=0.75,"low"=0.25)),probability=TRUE)
pred<-predict(model,m)
table(pred=pred,true=m$TPGrp)# confusion matrix
##Run Test Dataset
m2<-INDT[,c(5,6,7)]
pred2<- predict(model,m2)
table(pred=pred2,true=m2$TPGrp)# confusion matrix
beta<- drop(t(model$coefs)%*%x[model$index,])
beta0 <- model$rho
int<-(beta0 / beta[1]) #line intercept
sl<-(-beta[2] / beta[1]) # line slope
int1<-(beta0 - 1) / beta[1] #lower decision boundary
int2<-(beta0 + 1) / beta[1] #upper decision boundary
mindx<-as.data.frame(x[model$index,])#support points that determine the boundary
##Plot the hyperplane
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=sl)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP")
model$probA
model$probB
mtune<-tune(svm,TPGrp~.,data=m,kernel="linear",cost=2^(2:4),gamma=2^(-1:1),tune.control=sampling="fix")
mtune<-tune(svm,TPGrp~.,data=m,cost=2^(2:4),
gamma=2^(-1:1),tune.control=sampling="fix")
mtune<-tune(svm,TPGrp~.,data=m,kernel="linear",ranges=list(cost=2^(2:4),
gamma=2^(-1:1)),tune.control=sampling="fix")
mtune<-tune.svm(TPGrp~.,data=m,kernel="linear", cost = 2^(2:4))
mtune
mtune<-tune.svm(TPGrp~.,data=m,kernel="linear", cost = (1:10))
mtune
mtune$performances
plot(mtune)
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=4,"low"=4)),probability=TRUE)
pred<-predict(model,m)
table(pred=pred,true=m$TPGrp)# confusion matrix
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=4,"low"=1)),probability=TRUE)
pred<-predict(model,m)
table(pred=pred,true=m$TPGrp)# confusion matrix
pred$probability
pred
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=4,"low"=1)),probability=TRUE)
pred<-predict(model,m,probability=TRUE)
table(pred=pred,true=m$TPGrp)# confusion matrix
pred
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=4,"low"=1)),probability=TRUE)
pred<-predict(model,m)
table(pred=pred,true=m$TPGrp)# confusion matrix
pred<-predict(model,m,probability = TRUE)
table(pred=pred,true=m$TPGrp)# confusion matrix
pred
##and the upper margin and the lower margin of the decision boundary
beta<- drop(t(model$coefs)%*%x[model$index,])
beta0 <- model$rho
int<-(beta0 / beta[1]) #line intercept
sl<-(-beta[2] / beta[1]) # line slope
int1<-(beta0 - 1) / beta[1] #lower decision boundary
int2<-(beta0 + 1) / beta[1] #upper decision boundary
mindx<-as.data.frame(x[model$index,])#support points that determine the boundary
##Plot the hyperplane
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=sl)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP")
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=10,"low"=1)),probability=TRUE)
pred<-predict(model,m,probability = TRUE)
table(pred=pred,true=m$TPGrp)# confusion matrix
beta<- drop(t(model$coefs)%*%x[model$index,])
beta0 <- model$rho
int<-(beta0 / beta[1]) #line intercept
sl<-(-beta[2] / beta[1]) # line slope
int1<-(beta0 - 1) / beta[1] #lower decision boundary
int2<-(beta0 + 1) / beta[1] #upper decision boundary
mindx<-as.data.frame(x[model$index,])#support points that determine the boundary
##Plot the hyperplane
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=sl)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP")
model<-svm(TPGrp~.,data=m,kernel="linear",cost=1,scale=FALSE,
class.weights=(c("high"=4,"low"=1)),probability=TRUE)
pred<-predict(model,m,probability = TRUE)
table(pred=pred,true=m$TPGrp)# confusion matrix
beta<- drop(t(model$coefs)%*%x[model$index,])
beta0 <- model$rho
int<-(beta0 / beta[1]) #line intercept
sl<-(-beta[2] / beta[1]) # line slope
int1<-(beta0 - 1) / beta[1] #lower decision boundary
int2<-(beta0 + 1) / beta[1] #upper decision boundary
mindx<-as.data.frame(x[model$index,])#support points that determine the boundary
##Plot the hyperplane
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=sl)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP")
beta[1]
beta[2]
beta
int1
int2
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp3)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=sl)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP3")
IND$TPGrp3<-factor(ifelse(IND$TP_MGL<=0.02,"low",ifelse(IND$TP_MGL>0.065,"high","medium")))
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp3)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=sl)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP3")
int
1-int
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp3)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=0)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP3")
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp3)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=1)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP3")
ggplot()+
geom_point(data=IND,aes(H,L,colour=factor(TPGrp3)))+
#geom_point(data=mindx,aes(H,L),shape=21,size=5)+#support points that determine the boundary
xlim(0,1)+
ylim(0,1)+
theme(legend.position=c(0.75,0.75))+
geom_abline(intercept = int,slope=sl)+
geom_abline(intercept=int1,slope=sl,linetype=2)+
geom_abline(intercept=int2,slope=sl,linetype=2)+
labs(x="Rel Abund Tolerant Diatoms",
y="Rel Abund Senstitive Diatoms",
colour="TP GRP3")
